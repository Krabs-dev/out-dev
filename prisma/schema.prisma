generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  address            String              @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  referralsSent      BetReferral[]       @relation("ReferralsSent")
  dailyClaims        DailyClaim[]
  parimutuelBets     ParimutuelBet[]
  pointsTransactions PointsTransaction[]
  userPoints         UserPoints?
  winRecords         WinRecord[]
  userBadges         UserBadge[]
  activeBadge        UserBadge?          @relation("ActiveBadge", fields: [activeBadgeId], references: [id])
  activeBadgeId      String?             @unique

  @@map("users")
}

model UserPoints {
  id          String   @id @default(cuid())
  userId      String   @unique
  balance     Int      @default(0)
  totalEarned Int      @default(0)
  totalSpent  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_points")
}

model DailyClaim {
  id          String   @id @default(cuid())
  userId      String
  claimDate   DateTime
  baseAmount  Int      @default(1000)
  totalAmount Int
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("daily_claims")
}

model PointsTransaction {
  id          String                @id @default(cuid())
  userId      String
  type        PointsTransactionType
  amount      Int
  description String?
  metadata    Json?
  createdAt   DateTime              @default(now())
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@map("points_transactions")
}

model Market {
  id                    String          @id @default(cuid())
  title                 String
  description           String
  imageUrl              String?
  sourceUrl             String?
  category              MarketCategory
  closeDate             DateTime
  resolveDate           DateTime?
  isResolved            Boolean         @default(false)
  resolvedOutcome       Boolean?
  resolvedBy            String?
  resolvedAt            DateTime?
  maxBetAmount          Int             @default(50000)
  autoResolve           Boolean         @default(false)
  coingeckoId           String?
  targetPrice           Float?
  priceDirection        PriceDirection?
  lastCheckedPrice      Float?
  lastPriceCheckAt      DateTime?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  betReferrals          BetReferral[]
  marketStats           MarketStats?
  parimutuelBets        ParimutuelBet[]

  @@map("markets")
}

model MarketStats {
  id           String   @id @default(cuid())
  marketId     String   @unique
  currentPrice Float    @default(0.5)
  totalVolume  Int      @default(0)
  participants Int      @default(0)
  updatedAt    DateTime @updatedAt
  noPool       Int      @default(0)
  totalPool    Int      @default(0)
  yesPool      Int      @default(0)
  market       Market   @relation(fields: [marketId], references: [id], onDelete: Cascade)

  @@map("market_stats")
}

model MarketTrend {
  id            String   @id @default(cuid())
  marketId      String
  yesPercentage Float
  volume        Int
  timestamp     DateTime @default(now())

  @@index([marketId, timestamp])
  @@map("market_trends")
}

model ParimutuelBet {
  id            String   @id @default(cuid())
  userId        String
  marketId      String
  outcome       Boolean
  pointsWagered Int
  createdAt     DateTime @default(now())
  referralCode  String?
  market        Market   @relation(fields: [marketId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, marketId])
  @@index([marketId, outcome])
  @@index([userId, createdAt])
  @@index([referralCode])
  @@map("parimutuel_bets")
}

model WinRecord {
  id        String   @id @default(cuid())
  userId    String
  marketId  String
  winAmount Int
  betAmount Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([winAmount, createdAt])
  @@map("win_records")
}

model BetReferral {
  id              String   @id @default(cuid())
  referrerId      String
  marketId        String
  shareCode       String   @unique
  totalCommission Int      @default(0)
  usageCount      Int      @default(0)
  createdAt       DateTime @default(now())
  market          Market   @relation(fields: [marketId], references: [id], onDelete: Cascade)
  referrer        User     @relation("ReferralsSent", fields: [referrerId], references: [id], onDelete: Cascade)

  @@unique([referrerId, marketId])
  @@index([shareCode])
  @@index([referrerId, createdAt])
  @@index([marketId])
  @@map("bet_referrals")
}

enum PointsTransactionType {
  DAILY_CLAIM
  REFERRAL_BONUS
  BET_PLACED
  BET_WON
  BET_LOST
  ADMIN_ADJUSTMENT
  BET_REFUND
}

enum MarketCategory {
  CRYPTO
  SPORTS
  MEMECOINS
  TECHNOLOGY
  POLITICS
  OTHER
}

enum PriceDirection {
  ABOVE
  BELOW
}

model Admin {
  id        String   @id @default(cuid())
  address   String   @unique
  createdAt DateTime @default(now())
  createdBy String?
  isActive  Boolean  @default(true)

  @@map("admins")
}

model AutoResolveLock {
  id                  String   @id @default("auto_resolve_lock") // ID fixe pour singleton
  isLocked            Boolean  @default(false)
  lockedAt            DateTime?
  lockedBy            String?
  lockedUntil         DateTime?
  lastBackgroundRun   DateTime?
  backgroundInterval  Int      @default(300000)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("auto_resolve_lock")
}

model UserBadge {
  id          String         @id @default(cuid())
  userId      String         
  badgeType   BadgeType      
  tier        BadgeTier?
  category    MarketCategory?
  isActive    Boolean        @default(false)
  unlockedAt  DateTime       @default(now())
  value       Int?           // Valeur du palier atteint
  metadata    Json?
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeUser  User?          @relation("ActiveBadge")
  
  @@unique([userId, badgeType, tier, category])
  @@index([userId, isActive])
  @@map("user_badges")
}

enum BadgeType {
  BETA_TESTER
  OILY_OWNER
  FIRST_BET
  GAINS_TIER
  LOSSES_TIER
  VOLUME_TIER_CATEGORY
}

enum BadgeTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}
